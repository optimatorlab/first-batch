#!/bin/bash


# Updated 1/10/2017 by Chase Murray
#
# NOTES:
#	* We are using Ubuntu 14.04 in the lab.  


# Prelims
cd ${HOME}

sudo apt-get update
sudo apt-get install python-dev python-opencv python-wxgtk2.8 python-pip python-matplotlib python-pygame python-lxml

sudo pip install future

sudo apt-get update

sudo apt-get chromium-browser
sudo apt-get filezilla
sudo apt-get geany

sudo apt-get update



# Install espeak
cd ${HOME}
sudo apt-get install espeak
sudo apt-get install mbrola
sudo apt-get install mbrola-us1
sudo apt-get install mbrola-us2
# When giving commands in the terminal window:
# espeak –v mb-us1 –s 180 –p 30 “<insert text to be read aloud>”


sudo apt-get install python python-all-dev python-pip build-essential swig git


# Install portaudio19-dev and the python development package (python-all-dev) beforehand. 
cd ${HOME}
sudo apt-get install portaudio19-dev python-all-dev


cd ${HOME}
sudo pip install pyglet 

# Install libpulse-dev
cd ${HOME}
sudo apt-get install libpulse-dev

cd ${HOME}
sudo apt-get install python-gst0.10
sudo apt-get install gstreamer0.10-pocketsphinx


sudo apt-get update






# 1) ROS
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
	
sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116
	
sudo apt-get update

sudo apt-get install ros-indigo-desktop-full

sudo rosdep init
rosdep update
	
echo "# Set ROS Environment Variables:" >> ${HOME}/.bashrc
echo "source /opt/ros/indigo/setup.bash" >> ${HOME}/.bashrc
source ${HOME}/.bashrc

sudo apt-get install python-rosinstall

# Edit .bashrc:
# Set ROS Environment Variables:
echo "source ~/catkin_ws/devel/setup.bash" >> ${HOME}/.bashrc
source ${HOME}/.bashrc
	
	
# Create catkin workspace:
mkdir -p ${HOME}/catkin_ws/src
cd ${HOME}/catkin_ws/src	
	
# Build the workspace:
cd ${HOME}/catkin_ws/
catkin_make	




# 2) Rosbridge
cd ${HOME}
sudo apt-get install ros-indigo-rosbridge-suite




# 3) pymavlink
echo "# Add mavlink to PYTHONPATH" >> ${HOME}/.bashrc
echo "export PYTHONPATH=\${PYTHONPATH}:\$HOME/mavlink" >> ${HOME}/.bashrc
source ${HOME}/.bashrc
			
cd ${HOME}
git clone git://github.com/optimatorlab/mavlink.git --recursive				# GOT IT?
cd ${HOME}/mavlink/pymavlink
sudo python setup.py install


# 4) MAVproxy 
#	https://github.com/Dronecode/MAVProxy
#	http://ardupilot.github.io/MAVProxy/html/getting_started/download_and_installation.html

sudo pip install MAVProxy												# GOT IT?

		# WILL THIS WORK?
		cd ${HOME}
		git clone https://github.com/optimatorlab/MAVProxy
		cd ${HOME}/MAVProxy
		sudo python setup.py install
		

sudo adduser ${USER} dialout	

# 5) Dronekit
# http://python.dronekit.io/guide/quick_start.html

sudo pip install dronekit												# GOT IT?
sudo pip install dronekit-sitl											# GOT IT?


# 6) Cesium -- 3D Tiles Branch:

# In home directory, create a new directory named "cesium-3d-tiles"
mkdir ${HOME}/cesium-3d-tiles

# Download the .zip archive from:
https://github.com/optimatorlab/cesium/tree/3d-tiles					# GOT IT?
cd ${HOME}/cesium-3d-tiles
git clone git://github.com/optimatorlab/cesium/tree/3d-tiles	

	# FIXME -- NOT SURE IF A SUBDIRECTORY IS CREATED ABOVE


cd ${HOME}/cesium-3d-tiles
npm install
npm run build
npm run minifyRelease




# 7) jMAVsim
#	a. Install Java SDK (v1.7.0_95):
sudo apt-get install openjdk-7-jdk

#	b. Install ant (v1.9.3):
sudo apt-get install ant

#	c. Get jMAVSim
cd ${HOME} 
git clone https://github.com/optimatorlab/jMAVSim						# GOT IT?
cd jMAVSim
git submodule init
git submodule update


#	d. Edit jMAVSim Configs: 
# FIXME -- THIS SHOULD COME FROM OUR REPOSITORY
		cd ~/jMAVSim/src/me/drton/jmavsim
		Open “Simulator.java” 
		Find this line of code in “Simulator.java”:
			serialMAVLinkPort.open("/dev/tty.usbmodem1", 230400, 8, 1, 0);
		Change to:
			serialMAVLinkPort.open("/dev/ttyACM0", 230400, 8, 1, 0);
	
		Also, for debugging purposes, you might want to turn on the default 3D viz environment.
		Find the "if (false) {" line and change to true.
		In the future we'll add a command line flag to toggle this option.
				
		You may also change the default starting location (GPS coords).  More on this below.
				
#	e. Compile jMAVSim:
cd ${HOME}/jMAVSim
ant

#	f. modemmanager interferes with any non-modems and should be removed.
sudo apt-get remove modemmanager 

















# Install pyaudio
cd ${HOME}
git clone https://github.com/optimatorlab/pyaudio.git			# GOT IT?
cd ~/pyaudio
sudo python setup.py install

# Install pocketsphinx
cd ${HOME}
sudo pip install pocketsphinx

# Install SpeechRecognition 3.4.6
cd ${HOME}
sudo pip install SpeechRecognition



			# Make an examples directory (if it doesn't already exist)
			mkdir ~/pyaudio/examples
			
			# Extract the attached pyaudio_examples.zip archive into ~/pyaudio/examples
			
			# Try out these examples
			cd ~/pyaudio/examples
			python microphone_recognition.py
			python audio_transcribe.py
		



---------------------------------blather----------------------------
# https://github.com/ajbogh/blather


cd ${HOME}
git clone https://github.com/optimatorlab/blather.git							# GOT IT?

    1) move ~/blather/commands.tmp to ~/.config/blather/commands.conf and fill the file with sentences and commands to run
		mkdir ~/.config/blather/
		mv ~/blather/commands.tmp ~/.config/blather/commands.conf
		pico ~/.config/blather/commands.conf
    2) Run Blather.py, this will generate ~/.config/blather/sentences.corpus based on sentences in the 'commands' file
		cd ~/blather
		python Blather.py
    3) quit blather (there is a good chance it will just segfault)
    4) go to http://www.speech.cs.cmu.edu/tools/lmtool.html and upload the sentences.corpus file
		See ~/.config/blather/sentences.corpus
		This is in a hidden directory, making it difficult to find it for uploading.
			cp ~/.config/blather/sentences.corpus ~/Desktop/sentences.corpus
			You may delete ~/Desktop/sentences.corpus after you've uploaded it.
	
    5) download the resulting XXXX.lm file to the desktop, and save the file as lm.txt
    6) download the resulting XXXX.dic file to the desktop, and save the file as dic.txt
    
    7) make a backup of the old lm/dic files:
		cd ~/.config/blather/language
		mv lm lm.bak
		mv dic dic.bak
		
	8) move (and rename, with no extension) the downloaded files to the language subdirectory
		mv ~/Desktop/lm.txt ~/.config/blather/language/lm
		mv ~/Desktop/dic.txt ~/.config/blather/language/dic
		
    9) run Blather.py

		cd ~/blather
		./Blather.py
		
		say "hello world"
    
		NOTES:
        for Qt GUI, run Blather.py -i q
        for Gtk GUI, run Blather.py -i g
        to start a UI in 'continuous' listen mode, use the -c flag
        to use a microphone other than the system default, use the -d flag

		Bonus:
			Once the sentences.corpus file has been created, run the language_updater.sh script to automate the process of creating and downloading language files.	





	
